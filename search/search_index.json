{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MiRco documentation","text":"<p>NOTE: this documentation is currently under development.</p> <p>This documentation contains instructions for working with the <code>MiRco</code> mobile manipulator. <code>MiRco</code> consists of <code>MiR100</code> mobile base, <code>UR5e</code> manipulator arm and <code>Robotiq 2F-85</code>  gripper.</p>"},{"location":"#tested-on","title":"Tested on","text":"<ul> <li><code>MiR100</code> robot:<ul> <li>software version 2.13.3.2</li> </ul> </li> <li><code>UR5e</code> manipulator:<ul> <li>TODO</li> </ul> </li> <li><code>Robotiq 2F-85</code> gripper<ul> <li>TODO</li> </ul> </li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Thank you to the DFKI team for developing and maintaining the ROS <code>mir_robot</code> package.</li> <li>Thank you to the UniversalRobots team for developing and maintaining the ROS <code>Universal_Robots_ROS_Driver</code> package.</li> <li>Thank you to the TAMS-Group team for maintaining the ROS <code>Robotiq</code> package.</li> </ul>"},{"location":"file_structure/","title":"File structure","text":"<p>This page describes the file structure on the <code>MiRco</code> computer. It describes the core files that enable <code>MiRco</code> ROS control.</p> <p>Files are organized in a ROS <code>catkin</code> workspace. If you are not familiar, ROS concepts and catkin workspaces of the official ROS documentation are a good place to start. For a new project/application create a package within the <code>src</code> directory or create a new workspace and source both the new and <code>MiRco</code> workspaces.</p> <pre><code>MiRco_ws/src\n\u251c\u2500\u2500 CMakeLists.txt                  # main CMakeLists file\n\u251c\u2500\u2500 MiRco_robot                     \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 convenience_scripts         # TODO delete\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile                  # Docker file, see installation for info\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_analysis                # TODO delete   \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mirco_description           # MiRco unified URDF\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mirco_moveit_config         # MiRco MoveIt config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_control                 # MiR100 control node, services, driver launch\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mirco_robot                 # main launch files, main app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_joy_teleop              # MiR100 joystick control\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_rest_api                # MiR100 REST API package\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ur5e_2f85                   # Arm &amp; gripper control node, launch files, services\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ur5e_2f85_description       # Arm &amp; gripper URDF\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ur5e_2f85_moveit_config     # Arm &amp; gripper MoveIt config\n\u251c\u2500\u2500 mir_robot                       # MiR100 ROS driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile-noetic\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LICENSE\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_actions\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_description\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_dwb_critics\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_gazebo\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_msgs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_navigation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mir_robot\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sdc21x0\n\u251c\u2500\u2500 robotiq_2f85                    # gripper ROS driver \n \u00a0\u00a0 \u251c\u2500\u2500 CONTRIBUTING.md\n \u00a0\u00a0 \u251c\u2500\u2500 LICENSE\n \u00a0\u00a0 \u251c\u2500\u2500 README.md\n \u00a0\u00a0 \u251c\u2500\u2500 robotiq\n \u00a0\u00a0 \u251c\u2500\u2500 robotiq_2f_85_gripper_visualization\n \u00a0\u00a0 \u251c\u2500\u2500 robotiq_2f_gripper_action_server\n \u00a0\u00a0 \u251c\u2500\u2500 robotiq_2f_gripper_control\n \u00a0\u00a0 \u251c\u2500\u2500 robotiq_ethercat\n \u00a0\u00a0 \u251c\u2500\u2500 robotiq_modbus_rtu\n \u00a0\u00a0 \u2514\u2500\u2500 robotiq_modbus_tcp\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>NOTE: this documentation is currently under development.</p>"},{"location":"MiR100/","title":"Index","text":"<p>NOTE: this documentation is currently under development.</p>"},{"location":"MiR100/mir_connection/","title":"Connect to MiR100","text":"<p>There are two ways of interacting with the MiR100 mobile platform:</p> <ul> <li>MiR web interface</li> <li>ROS</li> </ul>"},{"location":"MiR100/mir_connection/#establish-mir-web-interface-connection","title":"Establish MiR web interface connection","text":"<p>You can connect to the web interface over its hotspot or the outside network it is connected to.</p>"},{"location":"MiR100/mir_connection/#hotspot","title":"Hotspot","text":"<ul> <li>connect to the MiR_R*** hotspot with the password</li> <li>open mir.com (default IP = 192.168.12.20) in your browser</li> <li>use your credentials to log in to the web interface</li> </ul>"},{"location":"MiR100/mir_connection/#outside-network","title":"Outside network","text":"<ul> <li>you have to know the <code>MiR100_IP</code>. If you don't, connect to the web interface over hotspot and go to <code>System -&gt; Settings -&gt; WiFi</code>. <code>MiR100_IP</code> is listed under the connection details</li> <li>open <code>MiR100_IP</code> in your browser</li> <li>use your credentials to log in to the web interface</li> </ul> <p>Warning</p> <p>MiR100 internal clock is prone to desynchronization which can mess with the robot control. First thing you have to do after you connect to the MiR web interface is go to <code>System -&gt; Settings -&gt; Date &amp; Time</code> and synchronize the internal clock. Click \"load from device\" and \"Save changes\".</p>"},{"location":"MiR100/mir_connection/#establish-ros-connection","title":"Establish ROS connection","text":"<p>MiR100 has a running ROS instance on its internal computer. This means you can:</p> <ul> <li>connect to its internal <code>roscore</code></li> <li>recommended: connect using the <code>mir_control</code> package</li> </ul>"},{"location":"MiR100/mir_connection/#internal-roscore","title":"Internal roscore","text":"<p>You have to be connected to the robot hotspot (MiR_R****). Set the ROS master addres to the address of MiR100 internal roscore and test the connection.</p> <pre><code># this needs to be done in every terminal\nexport ROS_MASTER_URI=http://192.168.12.20:11311\nexport ROS_HOSTNAME=&lt;your IP: 192.168.12.***&gt;\n\n# test the connection\n# test subscriber\nrostopic list\nrostopic echo /odom\n\n# test publisher\nrostopic pub -r 50 /cmd_vel geometry_msgs/TwistStamped \"header:\n  seq: 0\n  stamp:\n    secs: 0\n    nsecs: 0\n  frame_id: ''\ntwist:\n  linear:\n    x: 0.0\n    y: 0.0\n    z: 0.0\n  angular:\n    x: 0.0\n    y: 0.0\n    z: 0.2\"\n</code></pre>"},{"location":"MiR100/mir_connection/#using-mir_control","title":"Using mir_control","text":"<p>Using <code>mir_control</code> you can establish a ROS connection over MiR100 hotspot or the outside network it is connected to.</p>"},{"location":"MiR100/mir_connection/#hotspot_1","title":"Hotspot","text":"<p>If you are connected to the MiR_R**** hotspot:</p> <pre><code># launch mir_control\nroslaunch mir_control mir_control.launch\n</code></pre> <p>Terminal output will hang for a bit on \"ROS bridge connected\" message. Wait until \"MiR100: ...\" messages finish, then continue.</p> <pre><code># test the connection\n# test subscriber\nrostopic echo /odom\n\n# test publisher\nrostopic pub -r 50 /cmd_vel geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.2\"\n</code></pre>"},{"location":"MiR100/mir_connection/#outside-network_1","title":"Outside network","text":"<p>If you are connected to the same outside network:</p> <p><pre><code># launch mir_control\nroslaunch mir_control mir_control.launch mir_hostname:=&lt;MiR100_IP&gt;\n</code></pre> Terminal output will hang for a bit on \"ROS bridge connected\" message. Wait until \"MiR100: ...\" messages finish, then continue.</p> <pre><code># test the connection\n# test subscriber\nrostopic echo /mir100/odom\n\n# test publisher\nrostopic pub -r 50 /mir100/cmd_vel geometry_msgs/Twist \"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 0.2\"\n</code></pre> <p>Note</p> <p>When using <code>mir_control</code> to connect to the robot we send <code>geometry_msgs/Twist</code> type messages instead of <code>geometry_msgs/TwistStamped</code> to the <code>/cmd_vel</code> topic. That is because the <code>mir_driver</code> package expects messages of type <code>geometry_msgs/Twist</code> on the <code>/cmd_vel</code> topic and converts them to <code>geometry_msgs/TwistStamped</code> messages before sending the commands to the robot.</p>"},{"location":"MiR100/mir_connection/#connect-mir100-to-a-wifi-network","title":"Connect MiR100 to a WiFi network","text":"<p>You can connect the robot to an outside network:</p> <ul> <li>connect to the MiR_R**** hotspot</li> <li>go to <code>System -&gt; Settings -&gt; WiFi</code></li> <li>select \"Add connection\"</li> <li>select the network and fill in required information</li> <li>when you're finished select \"Add connection\"</li> <li><code>MiR100_IP</code> is displayed under the network connection details. You can use this IP to access the web interface or when using <code>mir_driver</code></li> </ul>"},{"location":"MiR100/mir_ros_control/","title":"ROS control","text":"<p>This page describes the ROS control of only the MiR100 robot. To control the mobile base as part of the MiRco mobile manipulator see MiRco control.  </p> <p>To establish a ROS connection see Establish ROS connection</p> <p>Warning</p> <p>MiR100 internal clock is prone to desynchronization which can mess with the robot control. Before controlling the robot, you have to connect to the MiR web interface and go to <code>System -&gt; Settings -&gt; Date &amp; Time</code> and synchronize the internal clock. Click \"load from device\" and \"Save changes\".</p> <p>Note</p> <p>For an advanced setup for clock synchronization see this solution.</p>"},{"location":"MiR100/mir_ros_control/#package-overview","title":"Package overview","text":"<p>MiR100 ROS control is done using the <code>mir_control</code> package. This is a wrapper around the <code>mir_driver</code> package. <code>mir_control</code> starts another <code>roscore</code> on the host computer, connecting to the MiR100 internal <code>roscore</code> over <code>ROS Bridge</code>. See the MiRco ROS schematic for a visual aid. It adds a control node, a python robot class, a goal teacher, ROS services and REST API integration. </p>"},{"location":"MiR100/mir_ros_control/#usage","title":"Usage","text":"<pre><code># hotspot\nroslaunch mir_control mir_control.launch\n\n# outside network\nroslaunch mir_control mir_control.launch mir_hostname:=&lt;MiR100_IP&gt;\n</code></pre>"},{"location":"MiR100/mir_ros_control/#services","title":"Services","text":""},{"location":"MiR100/mir_ros_control/#send_to_goal","title":"send_to_goal","text":"<p>Send robot to a goal saved in <code>/config/target_goals.yaml</code>.</p>"},{"location":"MiR100/mir_ros_control/#dock_to_vl_marker","title":"dock_to_vl_marker","text":"<p>Start docking to the selected marker.</p>"},{"location":"MiR100/mir_ros_control/#get_markers","title":"get_markers","text":"<p>Get list of saved markers in <code>/config/markers.yaml</code>.</p>"},{"location":"MiR100/mir_ros_control/#change_marker_offsets","title":"change_marker_offsets","text":""},{"location":"MiR100/mir_ros_control/#save_mobile_goal","title":"save_mobile_goal","text":""},{"location":"MiR100/mir_ros_control/#_1","title":"ROS control","text":""},{"location":"MiR100/mir_ros_control/#launch-files","title":"Launch files","text":""},{"location":"MiR100/mir_ros_control/#mir_controllaunch","title":"<code>mir_control.launch</code>","text":"<p>Launches <code>mir_driver</code> and the <code>mir_control_node</code>.  </p> <ul> <li><code>mir_namespace:</code> sets the namespace of the robot</li> <li><code>mir_tf_prefix:</code> sets the prefix for all of MiR100 TF frames</li> <li><code>mir_ip:</code>  tells the robot IP to the driver. The default value is <code>mir_ip=192.168.12.20</code> which is the IP of the robot if you are connected to its hotspot. If you are connected over an outside network this argument need to be changed to the <code>MiR100_IP</code></li> <li><code>node_start_delay:</code> <code>mir_driver</code> takes a while to establish a connection to MiR100. Before starting <code>mir_control_node</code> this connection need to be established. This sets the delay between starting <code>mir_driver</code> and <code>mir_control_node</code></li> </ul>"},{"location":"MiR100/mir_ros_control/#nodes","title":"Nodes","text":""},{"location":"MiR100/mir_ros_control/#mir_control_nodepy","title":"<code>mir_control_node.py</code>","text":"<p>The main control node for MiR100. Initializes a <code>MiR100</code> python object. See <code>mir100_class.py</code> script for details on the object.</p>"},{"location":"MiR100/mir_start/","title":"Starting MiR100","text":""},{"location":"MiR100/mir_start/#pre-check","title":"Pre-check","text":"<p>Before turning on the power, make sure that the MiR100 battery has enough charge. Check by plugging in the charger. LED lights on the charger will indicate battery status. See MiR charging instructions.</p>"},{"location":"MiR100/mir_start/#power","title":"Power","text":"<p>Press the blue button on its front right corner.</p> <p> </p>"},{"location":"MiR100/mir_start/#post-check","title":"Post-check","text":"<p>When you turn on the robot it could be in emergency stop. This is indicated by the red light indication on the robot. Release the red emergency stop button and press the blue reset button.</p> <p> </p>"},{"location":"MiR100/mir_start/#mir100-charging-instructions","title":"MiR100 charging instructions","text":"<p>TODO:photos</p>"},{"location":"MiR100/mir_start/#start-charging","title":"Start charging","text":"<ul> <li>Plug in the provided charger into power. Wait for the LEDs on the charger to indicate its ready state</li> <li>Remove the cover of the charging port. The charging port is located in the back left corner of the robot (opposite of the on/off switch)</li> <li>Plug the charger in the charging port</li> <li>Turn on the rocker switch above the charging port</li> <li>MiR100 battery percentage is indicated on the charger and in the web interface.  </li> </ul>"},{"location":"MiR100/mir_start/#stop-charging","title":"Stop charging","text":"<ul> <li>First turn off the rocker switch above the charging port</li> <li>Remove the charging cable and put on the charging port cover</li> </ul>"},{"location":"MiR100/mir_web_interface/","title":"MiR web interface","text":"<p>This is an overview of the MiR web interface. Here you will find</p> <ul> <li>how to connect to the interface</li> <li>the interface functions that are used the most. This is not a complete how-to on the use of the web interface capabilities. For detailed information about the interface see the MiR\u00a0robot Reference Guide pdf. (TODO) </li> </ul>"},{"location":"MiR100/mir_web_interface/#connect-to-the-web-interface","title":"Connect to the web interface","text":"<p>You can connect to the web interface over its hotspot or the outside network it is connected to.</p>"},{"location":"MiR100/mir_web_interface/#hotspot","title":"Hotspot","text":"<ul> <li>connect to the MiR_R*** hotspot with the password</li> <li>open mir.com (default IP = 192.168.12.20) in your browser</li> <li>use your credentials to log in to the web interface</li> </ul>"},{"location":"MiR100/mir_web_interface/#outside-network","title":"Outside network","text":"<ul> <li>you have to know the <code>MiR100_IP</code>. If you don't, connect to the web interface over hotspot and go to <code>System -&gt; Settings -&gt; WiFi</code>. <code>MiR100_IP</code> is listed under the connection details</li> <li>open <code>MiR100_IP</code> in your browser</li> <li>use your credentials to log in to the web interface</li> </ul> <p>Warning</p> <p>MiR100 internal clock is prone to desynchronization which can mess with the robot control. First thing you have to do after you connect to the MiR web interface is go to <code>System -&gt; Settings -&gt; Date &amp; Time</code> and synchronize the internal clock. Click \"load from device\" and \"Save changes\".</p>"},{"location":"MiR100/mir_web_interface/#interface-overview","title":"Interface overview","text":""},{"location":"MiR100/mir_web_interface/#top-bar","title":"Top bar","text":"<p>The top bar shows information on the current state of the robot. You can start/pause the robot, check robot status, select you language, select your user, check the robot battery percentage or manually control the robot with the on screen joystick. Robot speed for manual control is fixed when using the joystick from the top bar. This is not the recommended use of joystick. See TODO </p> <p></p>"},{"location":"MiR100/mir_web_interface/#navigation","title":"Navigation","text":"<p>To get to a specific subsection of the interface select an item in the primary menu and then in the relevant sub-menu.</p> <p></p>"},{"location":"MiR100/mir_web_interface/#interface-menus","title":"Interface menus","text":""},{"location":"MiR100/mir_web_interface/#dashboards","title":"Dashboards","text":"<p>Dashboards are the main way you interact with the robot over the web interface. You can create your own dashboard that displays only relevant information for your use case. Select <code>Dashboards</code> to open the list of dashboards, and select the <code>Create dashboard</code> button to open the dashboard designer. Alternatively, you can select an existing dashboard from the list. The dashboard below includes a Mission queue, mission action log, two mission buttons, a joystick and the map.</p> <p></p>"},{"location":"MiR100/mir_web_interface/#setup","title":"Setup","text":""},{"location":"MiR100/mir_web_interface/#missions","title":"Missions","text":"<p>A mission is a predefined series of actions that the robot can be set to perform.  A mission can be a simple transportation task between defined positions or a more complex job. To create a new mission select <code>Setup -&gt; Missions -&gt; Create mission</code> to open the mission designer. There you can add different actions to the mission, such as move to position, wait, show light and others. You can also use logic like a for loop.</p> <p></p> <p>Missions are started by adding a mission to the mission queue and clicking on the continue button in the top bar or in the dashboard. The robot will perform the missions in the order they are added, and you can rearrange the queued missions if needed. You can enqueue a mission:</p> <ul> <li>from a dashboard: you can configure a mission button</li> <li>from the <code>Missions</code> menu: in the mission list click on the green button next to the selected mission.</li> </ul>"},{"location":"MiR100/mir_web_interface/#maps","title":"Maps","text":"<p>In <code>Setup -&gt; Maps</code> you can choose the active map by clicking the check mark next to the map on the map list. You can also create or edit the maps the robot uses. All maps must belong to a site, which is the overall container for one or more maps used in the same facility. Maps must be contained in the same site for the robot to be able to move from one map to another. To create a new map select <code>Setup -&gt; Maps -&gt; Create map</code>. You are then directed to the map editor where you can start the mapping process and find tools to edit the map and add various features such as positions, markers and zones. For the full mapping instructions see the MiR\u00a0robot Reference Guide.</p> <p></p>"},{"location":"MiR100/mir_web_interface/#other-setup-submenus","title":"Other setup submenus","text":"<ul> <li>Sounds: you can upload new sounds to the robot or edit the volume and length of the uploaded sounds. Sounds can be used in missions as alerts.</li> <li>Transitions: transitions are used to handle changeovers from one map to another within the same site. </li> <li>I/O modules: I/O modules (Bluetooth and WISE) are used for receiving and giving input and output to be able to communicate with external devices.</li> <li>Users: set up, edit, and delete system users.</li> <li>User groups: create user groups and assign permissions to each group.</li> <li>Paths: Paths are saved routes between two positions. The first time the robot runs the route between two positions, the calculated path is saved and used every time the robot runs the same route, thereby saving time for route calculation. A path is automatically recalculated only in the event that one of its positions is modified. You can delete a path, and the robot will then calculate a new path the next time it runs between those two positions.</li> <li>Path guides: A path guide makes it possible to define paths that the robot should follow between two positions by defining waypoint positions between the start and goal. </li> <li>Footprints: A footprint defines the size of the robot and its top module or load.</li> </ul>"},{"location":"MiR100/mir_web_interface/#monitoring","title":"Monitoring","text":"<ul> <li>Analytics: gives a graphic overview of the robot's driven distance over a specified period of time.</li> <li>System log: contains events that are logged by the operating system components. The system log contains information about system state at a given time (shown by color-codes), the affected module, a short explanation, and a time stamp.</li> <li>Error logs: a list of all detected system errors. Each entry is shown with a description, an indication of which module is affected, and the time when the error occurred.</li> <li>Hardware health: allows you to check the condition of the robot's hardware components, such as motor controllers, lasers scanners, and cameras.</li> <li>Safety system: provides a live view of the input from the laser scanners and the state of the emergency stop button.</li> <li>Mission log: contains the list of all missions that the robot has executed and the mission that is running now. </li> </ul>"},{"location":"MiR100/mir_web_interface/#system","title":"System","text":""},{"location":"MiR100/mir_web_interface/#settings","title":"Settings","text":"<p>Settings contains the robot's parameter settings where the settings are divided into sub groups. Here are some of the most important settings:</p>"},{"location":"MiR100/mir_web_interface/#mapping","title":"Mapping","text":"<ul> <li><code>Mapping -&gt; Mapping algorithm</code>: the algorithm the robot uses for creating maps. Choose between Hector and Carthographer.</li> </ul>"},{"location":"MiR100/mir_web_interface/#planner","title":"Planner","text":"<ul> <li><code>Planner -&gt; Desired speed</code>: the desired default speed in m/s. This value can also be changed through a mission action.</li> <li><code>Planner -&gt; Maximum allowed speed</code>: the robot's maximum speed in m/s which cannot be exceeded no matter what is stated in missions, zones, or other settings.</li> <li><code>Planner -&gt; Cart reverse speed</code>: the speed in m/s of the robot when it is reversing with a cart.</li> <li><code>Planner -&gt; Maximum planning time</code>: the maximum time in seconds allocated for planning a path.</li> <li><code>Planner -&gt; Path timeout</code>: the number of seconds where the robot cannot follow the path before it generates a new global plan.</li> <li><code>Planner -&gt; Path deviation</code>: the maximum distance in meters that the robot's local plan is allowed to deviate from the global plan.</li> </ul>"},{"location":"MiR100/mir_web_interface/#ur-interface","title":"UR interface","text":"<ul> <li><code>UR interface -&gt; Universal Robot IP address</code>: the IP address of the UR robot. Used with the industrial interface control</li> </ul>"},{"location":"MiR100/mir_web_interface/#wifi","title":"WiFi","text":"<ul> <li><code>WiFi -&gt; Add connection</code>: used to connect MiR100 to an outside network. Select the network you wish to connect and fill in the required information. <code>MiR100_IP</code> is displayed under the network connection details. When the user and MiR100 are connected to the same outside network, you can use this IP to access the web interface.</li> </ul>"},{"location":"MiR100/mir_web_interface/#date-time","title":"Date &amp; Time","text":"<ul> <li><code>Date&amp;Time -&gt; Load from device -&gt; Save changes</code>: synchronize the internal clock. Since the internal clock is prone to desynchronization this needs to be done on every boot.</li> </ul>"},{"location":"MiR100/mir_web_interface/#other-system-submenus","title":"Other system submenus","text":"<ul> <li>Processes: displays the software modules that control the system processes on the robot.</li> <li>PLC registers: registers can be accessed through a serial interface using the robot\u2019s USB port (via RS232 adapter) or through a REST interface using the robot\u2019s Ethernet connection. </li> <li>Software versions: you can update the robot to run the newest software and see a list of all previous versions installed on the robot</li> <li>Backups: copies of the configuration and system state data of your robot</li> <li>Robot setup: contains the robot configuration and calibration properties.</li> <li>Triggers: yhe robot can be set up to use Modbus TCP/IP communication. In the Triggers section you can set up links between robot missions and Modbus coil IDs</li> </ul>"},{"location":"MiR100/mir_web_interface/#help","title":"Help","text":"<ul> <li>Robot information: contains robot information.</li> <li>API documentation: All functionality found in the robot interface can also be accessed through the robot's REST API. The REST API is what the robot interface uses to communicate with the robot. Here you can try the REST API. Enter your username and password and then select Launch API documentation. Each endpoint you can use is documented, and you can select Try it out to send an API request using the entered authorization. We also made a python REST API for the MiRco robot.</li> <li>Remote access: MiR Technical Support team remote access.</li> <li>Service book: notes about the robot.</li> <li>Manual: copy of the reference guide.</li> </ul>"},{"location":"MiR100/mir_web_interface_control/","title":"Web interface control","text":"<p>Warning</p> <p>MiR100 internal clock is prone to desynchronization which can mess with the robot control. First thing you have to do after you connect to the MiR web interface is go to <code>System -&gt; Settings -&gt; Date &amp; Time</code> and synchronize the internal clock. Click \"load from device\" and \"Save changes\".</p> <p>Note</p> <p>For an advanced setup for clock synchronization see this solution.</p>"},{"location":"MiR100/mir_web_interface_control/#create-positions","title":"Create positions","text":""},{"location":"MiR100/mir_web_interface_control/#position","title":"Position","text":""},{"location":"MiR100/mir_web_interface_control/#marker","title":"Marker","text":""},{"location":"MiR100/mir_web_interface_control/#control-the-robot","title":"Control the robot","text":""},{"location":"MiR100/mir_web_interface_control/#on-screen-joystick-control","title":"On screen joystick control","text":""},{"location":"MiR100/mir_web_interface_control/#send-to-a-goal","title":"Send to a goal","text":""},{"location":"MiR100/mir_web_interface_control/#missions","title":"Missions","text":""},{"location":"MiRco/","title":"MiRco documentation overview","text":"<p>This part of the documentation contains instructions for working with the <code>MiRco</code> mobile manipulator.</p>"},{"location":"MiRco/mirco_connection/","title":"Connect to MiRco","text":""},{"location":"MiRco/mirco_connection/#1-start-mirco","title":"1. Start MiRco","text":"<p>TODO: add pictures</p>"},{"location":"MiRco/mirco_connection/#11-pre-checks","title":"1.1 Pre-checks","text":"<p>Before turning on the power, make sure that:</p> <ul> <li>MiRco battery has enough charge. If not, you can plug in the cable for direct power. You can check battery status with the button on the charge controller. </li> <li>MiR100 battery has enough charge. Check by plugging in the charger. LED lights on the charger will indicate battery status. See MiR charging instructions (TODO).</li> <li>The white Ethernet cable from the MiRco computer is connected to the UR5e controller.</li> <li>UR5e controller is using the right memory stick. This is important because URCaps conflicts can impede gripper control.  </li> </ul>"},{"location":"MiRco/mirco_connection/#12-power","title":"1.2 Power","text":"<ul> <li>turn on the <code>MiRco</code> battery switch. Wait for the double audio signal</li> <li>turn on <code>MiRco</code> computer</li> <li>turn on <code>MiR100</code>: blue button on the front right corner</li> <li>turn on <code>UR5e</code> on the teach pendant</li> </ul>"},{"location":"MiRco/mirco_connection/#13-ur5e-settings","title":"1.3 UR5e settings","text":"<p>Go to <code>Settings -&gt; System -&gt; Network</code> and make sure the network settings are correct. This is the <code>UR5e</code> IP address that the <code>MiRco</code> computer uses to control the arm.</p> <pre><code>IP address: 192.168.77.245\nSubnet mask: 255.255.255.0\n</code></pre> <p>Go to <code>Installation -&gt; URCaps -&gt; External control</code> and make sure the network settings are correct. This is the <code>MiRco</code> computer IP address so that <code>UR5e</code> knows where the control is comming from.</p> <pre><code>Host IP: 192.168.77.240\nCustom port: 50002\nHost name: 192.168.77.240s\n</code></pre>"},{"location":"MiRco/mirco_connection/#14-mir100-settings","title":"1.4 MiR100 settings","text":"<p><code>MiR100</code> internal clock is prone to desynchronization. Connect to the MiR web interface and go to <code>System -&gt; Settings -&gt; Date &amp; Time</code> and synchronize the internal clock. Load from device and save changes.</p>"},{"location":"MiRco/mirco_connection/#2-connecting-to-mirco","title":"2. Connecting to MiRco","text":""},{"location":"MiRco/mirco_connection/#21-connect-to-the-mirco-computer","title":"2.1 Connect to the MiRco computer","text":"<p><code>MirCo</code> is connected to the lab network however it does not have a static <code>MiRco_IP</code> (for now).</p>"},{"location":"MiRco/mirco_connection/#211-if-you-know-mirco_ip","title":"2.1.1 If you know <code>MiRco_IP</code>","text":"<ul> <li>Ssh: <code>ssh student@MiRco_IP</code> and sign in.</li> <li>Remote desktop: Use NoMachine. When turning on the MiRco computer/your instance of NoMachine, it can take a couple of minutes for MiRco computer to show up under network devices. If you know <code>MiRco_IP</code> you don't need to wait. See this about enabling/disabling remote desktop.</li> <li>Connect a display, computer and mouse directly to the computer. See this about enabling/disabling remote desktop. </li> </ul>"},{"location":"MiRco/mirco_connection/#211-if-you-dont-know-mirco_ip","title":"2.1.1 If you don't know <code>MiRco_IP</code>","text":"<p>Connect to the computer over remote desktop or plug in a display. When connected, open the terminal and look up <code>MiRco_IP</code> with <code>ifconfig</code>.</p>"},{"location":"MiRco/mirco_connection/#222-troubleshooting","title":"2.2.2 Troubleshooting","text":"<p>If you can't connect remotely to <code>MiRco</code>, but the robot is in headless remote desktop mode:</p> <ul> <li>plugin in a display and keyboard</li> <li>restart the computer</li> <li>boot into a root terminal. When the boot menu comes up: Advanced options for <code>Ubuntu -&gt; Ubuntu (recovery mode) -&gt; root</code></li> <li>delete file <code>/etc/X11/xorg.conf</code></li> <li>restart the computer</li> </ul> <p>This disables the headless remote desktop mode. From here you can lookup <code>MiRco_IP</code> and proceed accordingly.</p>"},{"location":"MiRco/mirco_connection/#22-enabling-and-disabling-headless-remote-desktop-on-the-mirco-computer","title":"2.2 Enabling and disabling headless remote desktop on the MiRco computer","text":"<p>Remote desktop does not work if no monitor devices are plugged in the computer.  A workaround are two scripts located in <code>~/.local/bin</code>. This does not affect <code>ssh</code> connections.</p> <ul> <li><code>display_headless.sh</code>: creates a X11 config file that enables headless remote desktop. In headless mode there is no display output even if a display is connected to the computer. A logout is required.</li> <li><code>display_monitor.sh</code>: removes the X11 config file. You can connect a display but if you remove it, remote desktop will not work.</li> </ul> <pre><code>#enable headless remote desktop\n~/.local/bin/display_headless.sh\n\n#disable headless remote desktop\n~/.local/bin/display_monitor.sh\n</code></pre>"},{"location":"MiRco/mirco_connection/#3-development-tips","title":"3. Development tips","text":"<ul> <li>Connection over remote desktop will always be lacking. Use it only when visual tools like <code>RViz</code> are needed. When possible connect to the robot over <code>ssh</code>. </li> <li>When writing or testing code on MiRco, use the <code>Remote-SSH</code> extension for <code>VSCodium/VSCode</code>. It enables you to remotely access files on the MiRco computer within your development environment. There is no lag issue like with remote desktop and the robot is still free to move (as opposed to connecting a monitor to MiRco).</li> <li>If you are using a Docker installation on your robot, use the <code>Dev Containers</code> extension for <code>VSCode</code>. It enables you to access container files within your development environment. If you use it in combination with the <code>Remote-SSH</code> extension, you can access files within a container running on your robot computer. This extension is only available for <code>VSCode</code> and not for <code>VSCodium</code>. </li> </ul>"},{"location":"MiRco/mirco_control/","title":"MiRco control","text":"<p>Before controlling <code>MiRco</code> read the MiRco system interface chapter of the documentation.</p>"},{"location":"MiRco/mirco_control/#1-mirco-ros-interface","title":"1. MiRco ROS interface","text":""},{"location":"MiRco/mirco_control/#11-bringup","title":"1.1 Bringup","text":"<p>Prepare the robot arm. On the teach pendant load the <code>home/magisterij/janjericevic/mir100_ur5e_ros</code> program. Turn on and start the robot arm.</p> <p>Run the <code>MiRco</code> bringup launch file. Wait until the subscribing/publishing messages stop appearing. This means the connection is esablished</p> <pre><code>roslaunch mirco_robot mirco_bringup.launch\n</code></pre> <p>Start the UR program on the teach pendant. In the terminal where you launched the bringup file you should see a <code>Robot connected to reverse interface. Ready to receive control commands</code> message.</p> <p>Run the <code>MiRco</code> control launch file.  <pre><code>roslaunch mirco_robot mirco_control.launch\n</code></pre></p>"},{"location":"MiRco/mirco_interface/","title":"MiRco system interface","text":"<p>There are two ways of controlling <code>MiRco</code>:</p> <ul> <li>MiRco industrial interface: uses pre-existing option within the robots interfaces for communication between a MiR and a UR robot.</li> <li>MiRco ROS interface: uses a separate computer running ROS to control <code>MiRco</code>.</li> </ul>"},{"location":"MiRco/mirco_interface/#mirco-industrial-interface","title":"MiRco industrial interface","text":"<p>MiR and UR already include the ability to connect robots for basic synchronous operation using a MiR action. MiR action only takes care of the synchronization of the task handover. The individual robot tasks - MiR missions and UR programs - have to be predefined in their interfaces, then the task execution is handled by their respective control systems. The UR5e manipulator has to be in remote control mode. Detailed instructions can be found here. A schematic representation of a simple example is shown below.</p> <p></p> <p>The user launches the mobile manipulation application through the <code>MiR100</code> web interface. The task of synchronizing the robots is performed by the <code>MiR100</code> platform, where the communication between robots is done over an Ethernet connection. Within the <code>MiR100</code> mission, at the point where the manipulation is to be performed, an action is added to start the UR5e program. <code>MiR100</code> loads the program, runs it and waits for the end of the execution. The UR program contains manipulation and gripper instructions. <code>MiR100</code> then proceeds with the execution of the mission.</p> <p>Note</p> <p>By installing a plugin for the Polyscope software package - a URCap, the functionality of the UR teach pendant can be extended. The plugin allows starting and stopping <code>MiR100</code> missions, reading and writing <code>MiR100</code> registers and accessing <code>MiR100</code> states such as battery status, robot status and mission status. This documentation does not cover the use of this URCap.</p>"},{"location":"MiRco/mirco_interface/#mirco-ros-interface","title":"MiRco ROS interface","text":"<p>When the robot is controlled over the ROS interface, the <code>MiRco</code> computer takes over the role of the central control system. The schematic of the system is shown below. <code>MiRco</code> computer is connected to the internal <code>MiR100</code> computer over WiFi and to the <code>UR5e</code> controller over Ethernet, through which the connections to the manipulator and gripper are established. The computer runs a ROS instance with a unified robot model and ROS drivers for the mobile platform, manipulator and gripper. </p> <p></p> <p>With this setup, communication with <code>MiR100</code> takes place on two levels. The first level is the REST API. The API provides access to most of the functions of the web user interface, such as accessing predefined missions, triggering the docking action, saving robot poses and retrieving the robot state. The second level is direct communication with the ROS instance running on <code>MiR100</code>. Both ROS instances, on <code>MiRco</code> and on <code>MiR100</code>, act as master, so communication between them is done using the ROSBridge package. <code>MiR100</code> is running a customized version of the ROS navigation stack, through which the platform can be controlled. By using the REST API and direct communication with ROS, we achieve the use of the full capabilities of the mobile platform. </p> <p>Note</p> <p>In this setup, the ROS navigation stack used is the <code>MiR100</code> navigation stack. Target goals are sent to the <code>MiR100</code> <code>move_base</code> node, and the robot navigation stack handles planning and execution. However, you could implement your own navigation stack on the <code>MiRco</code> side and publish commands to the <code>cmv_vel</code> topic of the <code>MiR100</code> robot.</p> <p>Communication with <code>UR5e</code> and the <code>Robotiq 2F-85</code> gripper is done over an Ethernet connection. <code>MiRco</code> computer is connected to the <code>UR5e</code> controller, over which the communication with the gripper is established. <code>UR5e</code> manipulation is planned and executed using the <code>MoveIt</code> package.</p>"},{"location":"UR5e_2F85/","title":"Index","text":"<p>NOTE: this documentation is currently under development.</p>"}]}